<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Dashboard</title>
  <!-- Add Bootstrap CSS link -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/adminsidenavbar.css">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

 <style>
    /* Your existing styles here */

    /* Optional: Customize styles if needed */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }


    a {
      text-decoration: none;
      color: #fff;

    }

    a:hover {
      text-decoration: none;
      color: #fff;
    }

    input {
      width: 100%;
      font-size: 19rem;
    }

    label {
      font-size: 2vh;
    }

    #cropper-container {
      margin: 3rem;
    }

    .image-container {
      display: inline-block;
      margin-right: 10px;
    }

    .image-container img {
      max-width: 100%;
      height: auto;
    }

    .remove-button {
      display: block;
      margin-top: 5px;
      cursor: pointer;
      color: red;
      color: aliceblue;
      width: 16vh;
    }



    .save-button {
      display: block;
      /* margin:5rem; */
      width: 16vh;

    }
  </style>
</head>

<body>

  <div class="sidenavbar">
    <%- include('sidenavbar') %>

      <div class="content">
        <h3>Update Product</h3>


        <form id="productForm" action="/admin/addproduct" method="post"
          onsubmit="return validateForm()" enctype="multipart/form-data">
          <div class="form-group">
            <label for="productName">Product Name:</label>
            <input type="text" class="form-control" id="productName" name="productName"
              value="">
            <span id="productNameError" class="text-danger"></span>
            <% if(typeof message !=='undefined' ) { %>
              <div class="alert alert-danger text-center">
                <%= message %>
              </div>
              <% } %>

          </div>

          <div class="form-group">
            <label for="brand">Brand:</label>
            <select class="form-control" id="brand" name="brand" value="">


              <% Category.forEach(brand=> { %>
                <option value="<%=brand._id %>">
                  <%=brand.category %>
                </option>
                <% }); %>
            </select>
            <span id="brandError" class="text-danger"></span>



            <div class="form-group">
              <label for="price">Price:</label>
              <input type="number" class="form-control" id="price" name="price" value="">
              <span id="priceError" class="text-danger"></span>
            </div>

            <div class="form-group">
              <label for="rating">Rating:</label>
              <input type="number" class="form-control" id="rating" name="rating" value="">
              <span id="ratingError" class="text-danger"></span>
            </div>

            <div class="form-group">
              <label for="model">Model:</label>
              <input type="text" class="form-control" id="model" name="model" value="">
              <span id="modelError" class="text-danger"></span>
            </div>

            <div class="form-group">
              <label for="stock">Stock:</label>
              <input type="number" class="form-control" id="stock" name="stock" value="">
              <span id="stockError" class="text-danger"></span>
            </div>



            <div class="form-group">
              <label for="description">Description:</label>
              <input type="text" class="form-control" id="description" name="description"
                value="">
              <span id="descriptionError" class="text-danger"></span>
            </div>
            <div class="form-group">
              <label for="stock">Image:</label>
              <input type="file" accept="image/*" class="form-control" id="img" name="img" multiple
                onchange="previewimg(event)"">
              <span id="imageError" class="text-danger"></span>
              <div class="container d-flex">
                <div id="image-container" class="mt-5 ms-5 mb-5"></div>
                <div id="cropper-container" class="mt-3 mb-5"></div>
              </div>
            </div>
            <!-- <div id="formErrorMessage" class="text-danger mt-3"></div> -->
            <div class="d-flex justify-content-center">

              <button type="submit" class="btn btn-success btn-block mt-4">Add Product</button>
            </div> 
        </form>
      </div>
  </div>




  <script>
    const imageContainer = document.getElementById('image-container');
    let croppers = [];
    let croppedImagesData = []; // Array to store cropped image data

    document.getElementById('img').addEventListener('change', (event) => {
      const files = event.target.files;

      for (const file of files) {
        const reader = new FileReader();

        reader.onload = (event) => {
          const image = new Image();
          image.src = event.target.result;

          image.onload = () => {
            const containerDiv = document.createElement('div');
            containerDiv.className = 'image-container';

            const imageElement = document.createElement('img');
            imageElement.src = image.src;
            containerDiv.appendChild(imageElement);

            // Set a fixed height for the container
            containerDiv.style.height = '150px';

            // Create a new Cropper for each image without a fixed aspect ratio
            const cropper = new Cropper(imageElement, {
              aspectRatio: NaN, // Allow freeform cropping
              viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
            });

            // Create a "Save" button for each image
            const saveButton = document.createElement('button');
            saveButton.className = 'btn btn-success save-button';
            saveButton.textContent = 'Save';
            saveButton.addEventListener('click', () => {
              // Get the cropped image data for the specific cropper
              const croppedCanvas = cropper.getCroppedCanvas();
              const croppedImageData = croppedCanvas.toDataURL('image/jpeg');

              // Store cropped image data in the array
              croppedImagesData.push(croppedImageData);

              // Optionally, you can remove the "Save" button after saving
              containerDiv.removeChild(saveButton);
            });
            // Create a "Remove" button for each image
            const removeButton = document.createElement('button');
            removeButton.className = 'btn btn-danger remove-button';
            removeButton.textContent = 'Remove';
            removeButton.addEventListener('click', () => {
              // Remove the corresponding image and cropper
              const index = croppers.indexOf(cropper);
              if (index !== -1) {
                croppers.splice(index, 1);
                croppedImagesData.splice(index, 1);
              }
              containerDiv.remove();
            });

            containerDiv.appendChild(saveButton);
            containerDiv.appendChild(removeButton);

            imageContainer.appendChild(containerDiv);
            croppers.push(cropper);
          };
        };

        reader.readAsDataURL(file);
      }
    });

    // Handle form submission (for adding product)
    document.querySelector('form').addEventListener('submit', async (event) => {
      // Add the cropped image data to the form data
      croppedImagesData.forEach((croppedImageData, index) => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `croppedImages[${index}]`;
        hiddenInput.value = croppedImageData;
        document.querySelector('form').appendChild(hiddenInput);
      });

    });


  </script>

  <script>
    function validateForm() {
      // Reset error messages
      document.getElementById("productNameError").textContent = "";
      document.getElementById("priceError").textContent = "";
      document.getElementById("ratingError").textContent = "";
      document.getElementById("stockError").textContent = "";
      document.getElementById("modelError").textContent = "";
      document.getElementById("descriptionError").textContent = "";
      document.getElementById("brandError").textContent = "";
      document.getElementById("imageError").textContent = "";
      // Validate Product Name (no white spaces)
      var productName = document.getElementById("productName").value;
      if (productName.trim() === "") {
        document.getElementById("productNameError").textContent = "Product Name must be added.";
      }

      // Validate Brand
   

      // Validate Image
      var imageName = document.getElementById("img").value;
      if (imageName.trim() === "") {
        document.getElementById("imageError").textContent = "Image must be added.";
      }

      // Validate Price (greater than 1)
      var price = document.getElementById("price").value.trim();
      if (price === "") {
        document.getElementById("priceError").textContent = "Price is required.";
      } else if (parseFloat(price) <= 1) {
        document.getElementById("priceError").textContent = "Price must be greater than 1.";
      }

      // Validation Stock (greater than 0)
      var stock = document.getElementById("stock").value.trim();
      if (stock === "") {
        document.getElementById("stockError").textContent = "Stock is required.";
      } else if (parseFloat(stock) <= 0) {
        document.getElementById("stockError").textContent = "Stock must be greater than 0.";
      }

      // Validate Rating (between 0 and 5)
      var rating = document.getElementById("rating").value.trim();
      if (rating === "") {
        document.getElementById("ratingError").textContent = "Rating is required.";
      } else if (parseFloat(rating) < 0 || parseFloat(rating) > 5) {
        document.getElementById("ratingError").textContent = "Rating must be between 0 and 5.";
      }

      // Validate Description (no white spaces)
      var description = document.getElementById("description").value;
      if (description.trim() === "") {
        document.getElementById("descriptionError").textContent = "Description cannot be empty or contain only white spaces.";
      }

      // Validate Model
      var model = document.getElementById("model").value;
      if (model.trim() === "") {
        document.getElementById("modelError").textContent = "Model cannot be empty or contain only white spaces.";
      }

      // Check if any validation error exists
      if (
        document.getElementById("productNameError").textContent ||
        document.getElementById("brandError").textContent ||
        document.getElementById("imageError").textContent ||
        document.getElementById("priceError").textContent ||
        document.getElementById("stockError").textContent ||
        document.getElementById("ratingError").textContent ||
        document.getElementById("descriptionError").textContent ||
        document.getElementById("modelError").textContent
      ) {
        return false; // Validation failed, prevent form submission
      }

      return true; // Form is valid, allow submission
    }
  </script>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"
        integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"
        crossorigin="anonymous"></script>
  <!-- Add Bootstrap JS and Popper.js scripts at the end of the body -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>

</html>


